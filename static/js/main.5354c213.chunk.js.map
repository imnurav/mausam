{"version":3,"sources":["image/cloud.jpg","services/Api.js","Components/Information.js","Components/Form.js","Components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["getWeather","city","country","a","axios","get","data","useStyles","makeStyles","component","margin","container","display","row","padding","fontSize","letterSpacing","value","color","icon","marginRight","error","background","ErrorMessage","justifyContent","alignItems","border","height","Information","classes","Box","className","Typography","moment","format","name","sys","main","temp","humidity","class","Date","sunrise","toLocaleTimeString","sunset","weather","clouds","all","input","labelRoot","button","width","marginTop","Form","useState","setCity","setCountry","click","handleClick","setData","useEffect","weatherInfo","then","response","console","log","TextField","InputProps","onChange","e","handleCityChange","target","label","InputLabelProps","root","handleCountryChange","Button","variant","onClick","leftContainer","backgroundImage","Cloud","borderRadius","backgroundSize","rightContainer","Weather","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5354c213.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cloud.22496534.jpg\";","import axios from \"axios\";\r\n\r\nconst URL = \"https://api.openweathermap.org/data/2.5/weather\";\r\nconst API_KEY = \"49c52c385165361328d4aafbff37e087\";\r\nexport const getWeather = async (city, country) => {\r\n  const data = await axios.get(\r\n    `${URL}?q=${city},${country}&appid=${API_KEY}&units=metric`\r\n  );\r\n  return data;\r\n};\r\n","import { Box, makeStyles, Typography } from \"@material-ui/core\";\r\nimport PinDropIcon from \"@mui/icons-material/PinDrop\";\r\nimport BrightnessHighIcon from \"@mui/icons-material/BrightnessHigh\";\r\nimport BrightnessLowIcon from \"@mui/icons-material/BrightnessLow\";\r\nimport Brightness5Icon from \"@mui/icons-material/Brightness5\";\r\nimport OpacityIcon from \"@mui/icons-material/Opacity\";\r\nimport DehazeIcon from \"@mui/icons-material/Dehaze\";\r\nimport CloudIcon from \"@mui/icons-material/Cloud\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles({\r\n  component: {\r\n    margin: \"30px 95px\",\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n  },\r\n  row: {\r\n    padding: 10,\r\n    fontSize: 18,\r\n    letterSpacing: 2,\r\n  },\r\n  value: {\r\n    color: \"#fff\",\r\n  },\r\n  icon: {\r\n    color: \"darkred\",\r\n    marginRight: 15,\r\n  },\r\n  error: {\r\n    background: \"red\",\r\n    color: \"#fff\",\r\n    margin: 50,\r\n    padding: 20,\r\n  },\r\n  ErrorMessage: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    border: \"2px solid green\",\r\n    height: \"85%\",\r\n  },\r\n});\r\n\r\nconst Information = ({ data, city, country }) => {\r\n  const classes = useStyles();\r\n\r\n  const getCloudsData = (value) => {\r\n    if (value === 0) {\r\n      return \"Clear\";\r\n    } else if (value > 1 && value < 100) {\r\n      return \"Partially Cloudy\";\r\n    } else {\r\n      return \"Cloudy\";\r\n    }\r\n  };\r\n\r\n  return data && city && country ? (\r\n    <Box className={classes.component}>\r\n      <Typography className={classes.row}>\r\n        <span>{moment().format(\"LLLL\")}</span>\r\n      </Typography>\r\n      <Typography className={classes.row}>\r\n        <PinDropIcon className={classes.icon} />\r\n        Location:\r\n        <Box className={classes.value} component=\"span\">\r\n          {data.name}, {data.sys.country}{\" \"}\r\n        </Box>\r\n      </Typography>\r\n      <Typography className={classes.row}>\r\n        <Brightness5Icon className={classes.icon} />\r\n        Temperature:\r\n        <Box className={classes.value} component=\"span\">\r\n          {data.main.temp}Â°C\r\n        </Box>\r\n      </Typography>\r\n      <Typography className={classes.row}>\r\n        <OpacityIcon className={classes.icon} />\r\n        Humidity:\r\n        <Box className={classes.value} component=\"span\">\r\n          {data.main.humidity}%\r\n        </Box>\r\n      </Typography>\r\n      <Typography className={classes.row}>\r\n        <BrightnessHighIcon className={classes.icon} />\r\n        Sun Rise:<i class=\"fa-solid fa-alicorn\"></i>\r\n        <Box className={classes.value} component=\"span\">\r\n          {new Date(data.sys.sunrise * 1000).toLocaleTimeString()}\r\n        </Box>\r\n      </Typography>\r\n      <Typography className={classes.row}>\r\n        <BrightnessLowIcon className={classes.icon} />\r\n        Sun Set:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {new Date(data.sys.sunset * 1000).toLocaleTimeString()}\r\n        </Box>\r\n      </Typography>\r\n      <Typography className={classes.row}>\r\n        <DehazeIcon className={classes.icon} />\r\n        Condition:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {data.weather[0].main}{\" \"}\r\n        </Box>\r\n      </Typography>\r\n      <Typography className={classes.row}>\r\n        <CloudIcon className={classes.icon} />\r\n        Clouds:\r\n        <Box className={classes.value} component=\"span\">\r\n          {getCloudsData(data.clouds.all)}{\" \"}\r\n        </Box>\r\n      </Typography>\r\n    </Box>\r\n  ) : !(city && country) ? (\r\n    <Typography className={classes.error}>\r\n      {/* <ErrorIcon /> */}\r\n      Enter Valid City and Country Name :-)\r\n    </Typography>\r\n  ) : (\r\n    \" \"\r\n  );\r\n};\r\n\r\nexport default Information;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Box, TextField, Button, makeStyles } from \"@material-ui/core\";\r\nimport { getWeather } from \"../services/Api\";\r\nimport Information from \"./Information\";\r\n\r\nconst useStyles = makeStyles({\r\n  component: {\r\n    padding: 10,\r\n    display: \"flex\",\r\n    background: \"#445A6F\",\r\n  },\r\n  input: {\r\n    color: \"#fff\",\r\n    marginRight: 15,\r\n  },\r\n  labelRoot: {\r\n    fontSize: 15,\r\n    color: \"#fff\",\r\n  },\r\n  button: {\r\n    background: \"#e67e22\",\r\n    color: \"#fff\",\r\n    width: 150,\r\n    height: 40,\r\n    marginTop: 5,\r\n  },\r\n});\r\n\r\nconst Form = () => {\r\n  const classes = useStyles();\r\n  const [city, setCity] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [click, handleClick] = useState(false);\r\n  const [data, setData] = useState();\r\n\r\n  useEffect(() => {\r\n    const weatherInfo = async () => {\r\n      city &&\r\n        country &&\r\n        (await getWeather(city, country).then((response) => {\r\n          setData(response.data);\r\n        }));\r\n    };\r\n    weatherInfo();\r\n    console.log(city, country);\r\n    console.log(data);\r\n    handleClick(false);\r\n  }, [click]);\r\n\r\n  const handleCityChange = (city) => {\r\n    setCity(city);\r\n  };\r\n\r\n  const handleCountryChange = (country) => {\r\n    setCountry(country);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box className={classes.component}>\r\n        <TextField\r\n          InputProps={{ className: classes.input }}\r\n          onChange={(e) => handleCityChange(e.target.value)}\r\n          className={classes.input}\r\n          label=\"City\"\r\n          InputLabelProps={{\r\n            classes: { root: classes.labelRoot },\r\n          }}\r\n        />\r\n        <TextField\r\n          InputProps={{ className: classes.input }}\r\n          onChange={(e) => handleCountryChange(e.target.value)}\r\n          className={classes.input}\r\n          label=\"Country\"\r\n          InputLabelProps={{\r\n            classes: { root: classes.labelRoot },\r\n          }}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => handleClick(true)}\r\n          className={classes.button}\r\n        >\r\n          Get Weather\r\n        </Button>\r\n      </Box>\r\n      <Information data={data} city={city} country={country} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { Box, makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Cloud from \"../image/cloud.jpg\";\r\nimport Form from \"./Form\";\r\nconst useStyles = makeStyles({\r\n  component: {\r\n    height: \"100vh\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: \"65%\",\r\n    margin: \"auto\",\r\n    // masr,\r\n  },\r\n  leftContainer: {\r\n    backgroundImage: `url(${Cloud})`,\r\n    height: \"90%\",\r\n    width: \"30%\",\r\n    borderRadius: \"20px 0 0 20px\",\r\n    backgroundSize: \"cover\",\r\n  },\r\n  rightContainer: {\r\n    background: \"linear-gradient(to right,#e74c3c,#e67e22)\",\r\n    height: \"90%\",\r\n    width: \"70%\",\r\n  },\r\n});\r\nconst Weather = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.component}>\r\n      <Box className={classes.leftContainer}></Box>\r\n      <Box className={classes.rightContainer}>\r\n        <Form />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import \"./App.css\";\r\nimport Weather from \"./Components/Weather\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Weather />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}